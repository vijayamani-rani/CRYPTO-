def mod_inverse(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None

def break_affine():
    # Assume: B -> E and U -> T
    P1, C1 = ord('E') - 65, ord('B') - 65
    P2, C2 = ord('T') - 65, ord('U') - 65
    a = ((C1 - C2) * mod_inverse((P1 - P2) % 26, 26)) % 26
    b = (C1 - a * P1) % 26
    print(f"a = {a}, b = {b}")

    a_inv = mod_inverse(a, 26)
    ciphertext = "BUEXAMPLE"
    plaintext = ''
    for c in ciphertext:
        if c.isalpha():
            y = ord(c.upper()) - 65
            x = (a_inv * (y - b)) % 26
            plaintext += chr(x + 65)
        else:
            plaintext += c
    print("Decrypted:", plaintext)

break_affine()
