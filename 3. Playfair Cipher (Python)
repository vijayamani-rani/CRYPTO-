def generate_matrix(key):
    key = key.upper().replace('J', 'I')
    used = set('J')
    matrix = []
    for ch in key:
        if ch.isalpha() and ch not in used:
            matrix.append(ch)
            used.add(ch)
    for ch in 'ABCDEFGHIKLMNOPQRSTUVWXYZ':  # Note: no 'J'
        if ch not in used:
            matrix.append(ch)
            used.add(ch)
    return [matrix[i*5:(i+1)*5] for i in range(5)]

def prepare_plaintext(text):
    text = text.upper().replace('J', 'I')
    text = ''.join(filter(str.isalpha, text))
    prepared = ''
    i = 0
    while i < len(text):
        prepared += text[i]
        if i+1 == len(text):
            prepared += 'X'
            break
        if text[i] == text[i+1]:
            prepared += 'X'
            i += 1
        else:
            prepared += text[i+1]
            i += 2
    return prepared

def find_pos(matrix, ch):
    for r in range(5):
        for c in range(5):
            if matrix[r][c] == ch:
                return r, c

def encrypt_playfair(plaintext, matrix):
    ciphertext = ''
    for i in range(0, len(plaintext), 2):
        r1,c1 = find_pos(matrix, plaintext[i])
        r2,c2 = find_pos(matrix, plaintext[i+1])
        if r1 == r2:
            ciphertext += matrix[r1][(c1+1)%5] + matrix[r2][(c2+1)%5]
        elif c1 == c2:
            ciphertext += matrix[(r1+1)%5][c1] + matrix[(r2+1)%5][c2]
        else:
            ciphertext += matrix[r1][c2] + matrix[r2][c1]
    return ciphertext

key = input("Enter key: ")
pt = input("Enter plaintext: ")
matrix = generate_matrix(key)
prepared = prepare_plaintext(pt)
ct = encrypt_playfair(prepared, matrix)
print("Ciphertext:", ct)


Input:
Enter key: KEYWORD
Enter plaintext: HELLO WORLD
Output:
Ciphertext: BMODZBXDNABEKUDMUIXMMOUVIF
